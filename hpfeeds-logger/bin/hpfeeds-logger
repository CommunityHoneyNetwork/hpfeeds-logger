#!/usr/bin/env python

import json
import hpfeeds
import sys
import logging
from logging.handlers import RotatingFileHandler, SysLogHandler, \
    TimedRotatingFileHandler, WatchedFileHandler
from hpfeedslogger.formatters import splunk, arcsight, json_formatter, raw_json
from hpfeedslogger import processors

FORMATTERS = {
    'splunk': splunk.format,
    'arcsight': arcsight.format,
    'json': json_formatter.format,
    'raw_json': raw_json.format
}
LOG_FORMAT = '%(asctime)s - %(levelname)s - %(name)s[%(lineno)s][%(threadName)s] - %(message)s'
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter(LOG_FORMAT))
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(handler)


def main():
    if len(sys.argv) < 2:
        logger.error('No config file found. Exiting')
        return 1

    logger.info('Parsing config file: %s', sys.argv[1])

    config = json.load(open(sys.argv[1], 'r'))
    host = config['host']
    port = config['port']
    # hpfeeds protocol has trouble with unicode, hence the utf-8 encoding here
    channels = [c.encode('utf-8') for c in config['channels']]
    ident = config['ident'].encode('utf-8')
    secret = config['secret']

    processor = processors.HpfeedsMessageProcessor()
    formatter = FORMATTERS.get(config['formatter_name'])
    if not formatter:
        logger.error('Unsupported data log formatter encountered: %s. Exiting.',
                     config['formatter_name'])
        return 1

    data_logger = logging.getLogger('data')
    data_logger.setLevel(logging.INFO)

    try:
        if config['filelog'] and config['filelog']['filelog_enabled']:
            logfile = config['filelog']['log_file']

            if config['filelog']['rotation_backups']:
                backups = int(config['filelog']['rotation_backups'])
            else:
                backups = 3

            if config['filelog']['rotation_strategy'] == 'size':

                maxByt = int(
                    config['filelog']['rotation_size_max']) * 1024 * 1024
                file_handler = RotatingFileHandler(logfile, maxBytes=maxByt,
                                                   backupCount=backups)

            elif config['filelog']['rotation_strategy'] == 'time':
                rotation_interval = int(config['filelog']['rotation_time_max'])
                if config['filelog']['rotation_time_unit']:
                    if config['filelog']['rotation_time_unit'].lower() in ['d', 'h', 'm']:
                        rotation_unit = config['filelog']['rotation_time_unit'].lower()
                    else:
                        rotation_unit = 'h'
                        logger.warning('Could not interpret '
                                       'rotation_time_unit; defaulting to '
                                       'hour (h)')

                file_handler = TimedRotatingFileHandler(logfile, when=rotation_unit,
                                                        interval=rotation_interval,
                                                        backupCount=backups)
            elif config['filelog']['rotation_strategy'] == 'none':
                file_handler = WatchedFileHandler(logfile, mode='a')
            else:
                logger.warning(
                    'Invalid rotation_strategy! Defaulting to 100 MB size rotation!')
                file_handler = RotatingFileHandler(logfile, maxBytes=104857600,
                                                   backupCount=backups)

            file_handler.setFormatter(logging.Formatter('%(message)s'))
            data_logger.addHandler(file_handler)
            logger.info('Writing events to {0} using strategy {1}'.format(
                logfile, config['filelog']['rotation_strategy']))
    except Exception as e:
        logger.error("Invalid file handler arguments: {0}".format(repr(e)))
        return 1

    try:
        if config['syslog'] and config['syslog']['syslog_enabled']:
            syslog_host = config['syslog']['syslog_host'] or "localhost"
            syslog_port = config['syslog']['syslog_port'] or 514
            syslog_facility = config['syslog']['syslog_facility'] or "user"
            file_handler = SysLogHandler(address=(syslog_host, syslog_port),
                                         facility=syslog_facility)
            file_handler.setFormatter(logging.Formatter('%(message)s'))
            data_logger.addHandler(file_handler)
            logger.info('Writing syslog events to %s', syslog_host)
    except Exception as e:
        logger.error('Invalid sysconfig arguments')
        return 1

    try:
        hpc = hpfeeds.client.new(host, port, ident, secret)
        logging.info(hpc)
    except hpfeeds.FeedException as e:
        logger.error('feed exception', e)
        return 1

    logger.info('connected to %s', hpc.brokername)

    def on_message(identifier, channel, payload):
        if config['formatter_name'] == "raw_json":
            data_logger.info(formatter(payload))
        else:
            for msg in processor.process(identifier, channel, payload.decode('utf-8'),
                                         ignore_errors=True):
                data_logger.info(formatter(msg))

    def on_error(payload):
        logger.error('Error message from server: %s', payload)
        hpc.stop()

    hpc.subscribe(channels)
    try:
        hpc.run(on_message, on_error)
    except hpfeeds.FeedException as e:
        logger.error('feed exception:')
        logger.exception(e)
    except KeyboardInterrupt:
        logger.error('KeyboardInterrupt encountered, exiting ...')
    except Exception as e:
        logger.error('Unknown error encountered, exiting ...')
        logger.exception(e)
    finally:
        hpc.close()
    return 0


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        logger.error('KeyboardInterrupt encountered, exiting ...')
        sys.exit(0)
